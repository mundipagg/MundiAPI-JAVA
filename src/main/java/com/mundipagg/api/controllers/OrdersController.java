/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mundipagg.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import com.mundipagg.api.*;
import com.mundipagg.api.models.*;
import com.mundipagg.api.exceptions.*;
import com.mundipagg.api.http.client.HttpClient;
import com.mundipagg.api.http.client.HttpContext;
import com.mundipagg.api.http.request.HttpRequest;
import com.mundipagg.api.http.response.HttpResponse;
import com.mundipagg.api.http.response.HttpStringResponse;
import com.mundipagg.api.http.client.APICallBack;
import com.mundipagg.api.controllers.syncwrapper.APICallBackCatcher;

public class OrdersController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static OrdersController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the OrdersController class 
     */
    public static OrdersController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new OrdersController();
                }
            }
        }
        return instance;
    }

    /**
     * UpdateOrderStatus
     * @param    id    Required parameter: Order Id
     * @param    body    Required parameter: Update Order Model
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the OrdersClosedResponse response from the API call 
     */
    public OrdersClosedResponse updateOrderStatus(
                final String id,
                final UpdateOrderStatusRequest body,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdateOrderStatusRequest(id, body, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateOrderStatusResponse(_context);
    }

    /**
     * UpdateOrderStatus
     * @param    id    Required parameter: Order Id
     * @param    body    Required parameter: Update Order Model
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updateOrderStatusAsync(
                final String id,
                final UpdateOrderStatusRequest body,
                final String idempotencyKey,
                final APICallBack<OrdersClosedResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateOrderStatusRequest(id, body, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersClosedResponse returnValue = _handleUpdateOrderStatusResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateOrderStatus
     */
    private HttpRequest _buildUpdateOrderStatusRequest(
                final String id,
                final UpdateOrderStatusRequest body,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders/{id}/closed");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("id", id);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", "application/json");
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateOrderStatus
     * @return An object of type OrdersClosedResponse
     */
    private OrdersClosedResponse _handleUpdateOrderStatusResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersClosedResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersClosedResponse>(){});

        return _result;
    }

    /**
     * DeleteAllOrderItems
     * @param    orderId    Required parameter: Order Id
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the OrdersItemsResponse response from the API call 
     */
    public OrdersItemsResponse deleteAllOrderItems(
                final String orderId,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildDeleteAllOrderItemsRequest(orderId, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteAllOrderItemsResponse(_context);
    }

    /**
     * DeleteAllOrderItems
     * @param    orderId    Required parameter: Order Id
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void deleteAllOrderItemsAsync(
                final String orderId,
                final String idempotencyKey,
                final APICallBack<OrdersItemsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteAllOrderItemsRequest(orderId, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersItemsResponse returnValue = _handleDeleteAllOrderItemsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteAllOrderItems
     */
    private HttpRequest _buildDeleteAllOrderItemsRequest(
                final String orderId,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders/{orderId}/items");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("orderId", orderId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteAllOrderItems
     * @return An object of type OrdersItemsResponse
     */
    private OrdersItemsResponse _handleDeleteAllOrderItemsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersItemsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersItemsResponse>(){});

        return _result;
    }

    /**
     * CreateOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    body    Required parameter: Order Item Model
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the OrdersItemsResponse1 response from the API call 
     */
    public OrdersItemsResponse1 createOrderItem(
                final String orderId,
                final OrdersItemsRequest body,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildCreateOrderItemRequest(orderId, body, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateOrderItemResponse(_context);
    }

    /**
     * CreateOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    body    Required parameter: Order Item Model
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void createOrderItemAsync(
                final String orderId,
                final OrdersItemsRequest body,
                final String idempotencyKey,
                final APICallBack<OrdersItemsResponse1> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateOrderItemRequest(orderId, body, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersItemsResponse1 returnValue = _handleCreateOrderItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createOrderItem
     */
    private HttpRequest _buildCreateOrderItemRequest(
                final String orderId,
                final OrdersItemsRequest body,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders/{orderId}/items");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("orderId", orderId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", "application/json");
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createOrderItem
     * @return An object of type OrdersItemsResponse1
     */
    private OrdersItemsResponse1 _handleCreateOrderItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersItemsResponse1 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersItemsResponse1>(){});

        return _result;
    }

    /**
     * Updates the metadata from an order
     * @param    orderId    Required parameter: The order id
     * @param    body    Required parameter: Request for updating the order metadata
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the OrdersMetadataResponse response from the API call 
     */
    public OrdersMetadataResponse updateOrderMetadata(
                final String orderId,
                final OrdersMetadataRequest body,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdateOrderMetadataRequest(orderId, body, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateOrderMetadataResponse(_context);
    }

    /**
     * Updates the metadata from an order
     * @param    orderId    Required parameter: The order id
     * @param    body    Required parameter: Request for updating the order metadata
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updateOrderMetadataAsync(
                final String orderId,
                final OrdersMetadataRequest body,
                final String idempotencyKey,
                final APICallBack<OrdersMetadataResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateOrderMetadataRequest(orderId, body, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersMetadataResponse returnValue = _handleUpdateOrderMetadataResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateOrderMetadata
     */
    private HttpRequest _buildUpdateOrderMetadataRequest(
                final String orderId,
                final OrdersMetadataRequest body,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Orders/{order_id}/metadata");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("order_id", orderId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", "application/json");
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateOrderMetadata
     * @return An object of type OrdersMetadataResponse
     */
    private OrdersMetadataResponse _handleUpdateOrderMetadataResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersMetadataResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersMetadataResponse>(){});

        return _result;
    }

    /**
     * Gets all orders
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    code    Optional parameter: Filter for order's code
     * @param    status    Optional parameter: Filter for order's status
     * @param    createdSince    Optional parameter: Filter for order's creation date start range
     * @param    createdUntil    Optional parameter: Filter for order's creation date end range
     * @param    customerId    Optional parameter: Filter for order's customer id
     * @return    Returns the OrdersResponse response from the API call 
     */
    public OrdersResponse getOrders(
                final Integer page,
                final Integer size,
                final String code,
                final String status,
                final DateTime createdSince,
                final DateTime createdUntil,
                final String customerId
    ) throws Throwable {

        HttpRequest _request = _buildGetOrdersRequest(page, size, code, status, createdSince, createdUntil, customerId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetOrdersResponse(_context);
    }

    /**
     * Gets all orders
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    code    Optional parameter: Filter for order's code
     * @param    status    Optional parameter: Filter for order's status
     * @param    createdSince    Optional parameter: Filter for order's creation date start range
     * @param    createdUntil    Optional parameter: Filter for order's creation date end range
     * @param    customerId    Optional parameter: Filter for order's customer id
     */
    public void getOrdersAsync(
                final Integer page,
                final Integer size,
                final String code,
                final String status,
                final DateTime createdSince,
                final DateTime createdUntil,
                final String customerId,
                final APICallBack<OrdersResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetOrdersRequest(page, size, code, status, createdSince, createdUntil, customerId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersResponse returnValue = _handleGetOrdersResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getOrders
     */
    private HttpRequest _buildGetOrdersRequest(
                final Integer page,
                final Integer size,
                final String code,
                final String status,
                final DateTime createdSince,
                final DateTime createdUntil,
                final String customerId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        if (code != null) {
            _queryParameters.put("code", code);
        }
        if (status != null) {
            _queryParameters.put("status", status);
        }
        if (createdSince != null) {
            _queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        }
        if (createdUntil != null) {
            _queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));
        }
        if (customerId != null) {
            _queryParameters.put("customer_id", customerId);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getOrders
     * @return An object of type OrdersResponse
     */
    private OrdersResponse _handleGetOrdersResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersResponse>(){});

        return _result;
    }

    /**
     * Creates a new Order
     * @param    body    Required parameter: Request for creating an order
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the OrdersResponse1 response from the API call 
     */
    public OrdersResponse1 createOrder(
                final OrdersRequest body,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildCreateOrderRequest(body, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateOrderResponse(_context);
    }

    /**
     * Creates a new Order
     * @param    body    Required parameter: Request for creating an order
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void createOrderAsync(
                final OrdersRequest body,
                final String idempotencyKey,
                final APICallBack<OrdersResponse1> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateOrderRequest(body, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersResponse1 returnValue = _handleCreateOrderResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createOrder
     */
    private HttpRequest _buildCreateOrderRequest(
                final OrdersRequest body,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", "application/json");
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createOrder
     * @return An object of type OrdersResponse1
     */
    private OrdersResponse1 _handleCreateOrderResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersResponse1 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersResponse1>(){});

        return _result;
    }

    /**
     * DeleteOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    itemId    Required parameter: Item Id
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the OrdersItemsResponse1 response from the API call 
     */
    public OrdersItemsResponse1 deleteOrderItem(
                final String orderId,
                final String itemId,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildDeleteOrderItemRequest(orderId, itemId, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteOrderItemResponse(_context);
    }

    /**
     * DeleteOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    itemId    Required parameter: Item Id
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void deleteOrderItemAsync(
                final String orderId,
                final String itemId,
                final String idempotencyKey,
                final APICallBack<OrdersItemsResponse1> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteOrderItemRequest(orderId, itemId, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersItemsResponse1 returnValue = _handleDeleteOrderItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteOrderItem
     */
    private HttpRequest _buildDeleteOrderItemRequest(
                final String orderId,
                final String itemId,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders/{orderId}/items/{itemId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("orderId", orderId);
        _templateParameters.put("itemId", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteOrderItem
     * @return An object of type OrdersItemsResponse1
     */
    private OrdersItemsResponse1 _handleDeleteOrderItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersItemsResponse1 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersItemsResponse1>(){});

        return _result;
    }

    /**
     * GetOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    itemId    Required parameter: Item Id
     * @return    Returns the OrdersItemsResponse1 response from the API call 
     */
    public OrdersItemsResponse1 getOrderItem(
                final String orderId,
                final String itemId
    ) throws Throwable {

        HttpRequest _request = _buildGetOrderItemRequest(orderId, itemId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetOrderItemResponse(_context);
    }

    /**
     * GetOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    itemId    Required parameter: Item Id
     */
    public void getOrderItemAsync(
                final String orderId,
                final String itemId,
                final APICallBack<OrdersItemsResponse1> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetOrderItemRequest(orderId, itemId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersItemsResponse1 returnValue = _handleGetOrderItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getOrderItem
     */
    private HttpRequest _buildGetOrderItemRequest(
                final String orderId,
                final String itemId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders/{orderId}/items/{itemId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("orderId", orderId);
        _templateParameters.put("itemId", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getOrderItem
     * @return An object of type OrdersItemsResponse1
     */
    private OrdersItemsResponse1 _handleGetOrderItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersItemsResponse1 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersItemsResponse1>(){});

        return _result;
    }

    /**
     * UpdateOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    itemId    Required parameter: Item Id
     * @param    body    Required parameter: Item Model
     * @param    idempotencyKey    Optional parameter: Example: 
     * @return    Returns the OrdersItemsResponse1 response from the API call 
     */
    public OrdersItemsResponse1 updateOrderItem(
                final String orderId,
                final String itemId,
                final OrdersItemsRequest1 body,
                final String idempotencyKey
    ) throws Throwable {

        HttpRequest _request = _buildUpdateOrderItemRequest(orderId, itemId, body, idempotencyKey);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateOrderItemResponse(_context);
    }

    /**
     * UpdateOrderItem
     * @param    orderId    Required parameter: Order Id
     * @param    itemId    Required parameter: Item Id
     * @param    body    Required parameter: Item Model
     * @param    idempotencyKey    Optional parameter: Example: 
     */
    public void updateOrderItemAsync(
                final String orderId,
                final String itemId,
                final OrdersItemsRequest1 body,
                final String idempotencyKey,
                final APICallBack<OrdersItemsResponse1> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateOrderItemRequest(orderId, itemId, body, idempotencyKey);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersItemsResponse1 returnValue = _handleUpdateOrderItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateOrderItem
     */
    private HttpRequest _buildUpdateOrderItemRequest(
                final String orderId,
                final String itemId,
                final OrdersItemsRequest1 body,
                final String idempotencyKey) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders/{orderId}/items/{itemId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("orderId", orderId);
        _templateParameters.put("itemId", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("Content-Type", "application/json");
        if (idempotencyKey != null) {
            _headers.put("idempotency-key", idempotencyKey);
        }
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateOrderItem
     * @return An object of type OrdersItemsResponse1
     */
    private OrdersItemsResponse1 _handleUpdateOrderItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersItemsResponse1 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersItemsResponse1>(){});

        return _result;
    }

    /**
     * Gets an order
     * @param    orderId    Required parameter: Order id
     * @return    Returns the OrdersResponse1 response from the API call 
     */
    public OrdersResponse1 getOrder(
                final String orderId
    ) throws Throwable {

        HttpRequest _request = _buildGetOrderRequest(orderId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetOrderResponse(_context);
    }

    /**
     * Gets an order
     * @param    orderId    Required parameter: Order id
     */
    public void getOrderAsync(
                final String orderId,
                final APICallBack<OrdersResponse1> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetOrderRequest(orderId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            OrdersResponse1 returnValue = _handleGetOrderResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getOrder
     */
    private HttpRequest _buildGetOrderRequest(
                final String orderId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/orders/{order_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("order_id", orderId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("ServiceRefererName", Configuration.serviceRefererName);

        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getOrder
     * @return An object of type OrdersResponse1
     */
    private OrdersResponse1 _handleGetOrderResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //Error handling using HTTP status codes
        int _responseCode = _response.getStatusCode();

        if (_responseCode == 400) {
            throw new MErrorException("Invalid request", _context);
        }
        if (_responseCode == 401) {
            throw new MErrorException("Invalid API key", _context);
        }
        if (_responseCode == 404) {
            throw new MErrorException("An informed resource was not found", _context);
        }
        if (_responseCode == 412) {
            throw new MErrorException("Business validation error", _context);
        }
        if (_responseCode == 422) {
            throw new MErrorException("Contract validation error", _context);
        }
        if (_responseCode == 500) {
            throw new MErrorException("Internal server error", _context);
        }
        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        OrdersResponse1 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<OrdersResponse1>(){});

        return _result;
    }

}
