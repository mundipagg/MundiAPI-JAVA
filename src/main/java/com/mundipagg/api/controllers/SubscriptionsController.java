/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mundipagg.api.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import com.mundipagg.api.*;
import com.mundipagg.api.models.*;
import com.mundipagg.api.exceptions.*;
import com.mundipagg.api.http.client.HttpClient;
import com.mundipagg.api.http.client.HttpContext;
import com.mundipagg.api.http.request.HttpRequest;
import com.mundipagg.api.http.response.HttpResponse;
import com.mundipagg.api.http.response.HttpStringResponse;
import com.mundipagg.api.http.client.APICallBack;
import com.mundipagg.api.controllers.syncwrapper.APICallBackCatcher;

public class SubscriptionsController extends BaseController {
    //private static variables for the singleton pattern
    private static final Object syncObject = new Object();
    private static SubscriptionsController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the SubscriptionsController class 
     */
    public static SubscriptionsController getInstance() {
        if (null == instance) {
            synchronized (syncObject) {
                if (null == instance) {
                    instance = new SubscriptionsController();
                }
            }
        }
        return instance;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription Id
     * @param    incrementId    Required parameter: The increment Id
     * @return    Returns the GetIncrementResponse response from the API call 
     */
    public GetIncrementResponse getIncrementById(
                final String subscriptionId,
                final String incrementId
    ) throws Throwable {

        HttpRequest _request = _buildGetIncrementByIdRequest(subscriptionId, incrementId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetIncrementByIdResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription Id
     * @param    incrementId    Required parameter: The increment Id
     * @return    Returns the void response from the API call 
     */
    public void getIncrementByIdAsync(
                final String subscriptionId,
                final String incrementId,
                final APICallBack<GetIncrementResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetIncrementByIdRequest(subscriptionId, incrementId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetIncrementResponse returnValue = _handleGetIncrementByIdResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getIncrementById
     */
    private HttpRequest _buildGetIncrementByIdRequest(
                final String subscriptionId,
                final String incrementId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/increments/{increment_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("increment_id", incrementId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getIncrementById
     * @return An object of type void
     */
    private GetIncrementResponse _handleGetIncrementByIdResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetIncrementResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetIncrementResponse>(){});

        return _result;
    }

    /**
     * Updates the start at date from a subscription
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    request    Required parameter: Request for updating the subscription start date
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionStartAt(
                final String subscriptionId,
                final UpdateSubscriptionStartAtRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionStartAtRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionStartAtResponse(_context);
    }

    /**
     * Updates the start at date from a subscription
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    request    Required parameter: Request for updating the subscription start date
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionStartAtAsync(
                final String subscriptionId,
                final UpdateSubscriptionStartAtRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionStartAtRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionStartAtResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionStartAt
     */
    private HttpRequest _buildUpdateSubscriptionStartAtRequest(
                final String subscriptionId,
                final UpdateSubscriptionStartAtRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/start-at");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionStartAt
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionStartAtResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Updates the credit card from a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for updating a card
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionCard(
                final String subscriptionId,
                final UpdateSubscriptionCardRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionCardRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionCardResponse(_context);
    }

    /**
     * Updates the credit card from a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for updating a card
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionCardAsync(
                final String subscriptionId,
                final UpdateSubscriptionCardRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionCardRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionCardResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionCard
     */
    private HttpRequest _buildUpdateSubscriptionCardRequest(
                final String subscriptionId,
                final UpdateSubscriptionCardRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/card");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionCard
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionCardResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Updates a subscription item
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    itemId    Required parameter: Item id
     * @param    body    Required parameter: Request for updating a subscription item
     * @return    Returns the GetSubscriptionItemResponse response from the API call 
     */
    public GetSubscriptionItemResponse updateSubscriptionItem(
                final String subscriptionId,
                final String itemId,
                final UpdateSubscriptionItemRequest body
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionItemRequest(subscriptionId, itemId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionItemResponse(_context);
    }

    /**
     * Updates a subscription item
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    itemId    Required parameter: Item id
     * @param    body    Required parameter: Request for updating a subscription item
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionItemAsync(
                final String subscriptionId,
                final String itemId,
                final UpdateSubscriptionItemRequest body,
                final APICallBack<GetSubscriptionItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionItemRequest(subscriptionId, itemId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionItemResponse returnValue = _handleUpdateSubscriptionItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionItem
     */
    private HttpRequest _buildUpdateSubscriptionItemRequest(
                final String subscriptionId,
                final String itemId,
                final UpdateSubscriptionItemRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items/{item_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("item_id", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().putBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionItem
     * @return An object of type void
     */
    private GetSubscriptionItemResponse _handleUpdateSubscriptionItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionItemResponse>(){});

        return _result;
    }

    /**
     * Creates a usage
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    itemId    Required parameter: Item id
     * @param    body    Required parameter: Request for creating a usage
     * @return    Returns the GetUsageResponse response from the API call 
     */
    public GetUsageResponse createUsage(
                final String subscriptionId,
                final String itemId,
                final CreateUsageRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateUsageRequest(subscriptionId, itemId, body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateUsageResponse(_context);
    }

    /**
     * Creates a usage
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    itemId    Required parameter: Item id
     * @param    body    Required parameter: Request for creating a usage
     * @return    Returns the void response from the API call 
     */
    public void createUsageAsync(
                final String subscriptionId,
                final String itemId,
                final CreateUsageRequest body,
                final APICallBack<GetUsageResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateUsageRequest(subscriptionId, itemId, body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetUsageResponse returnValue = _handleCreateUsageResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createUsage
     */
    private HttpRequest _buildCreateUsageRequest(
                final String subscriptionId,
                final String itemId,
                final CreateUsageRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items/{item_id}/usages");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("item_id", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createUsage
     * @return An object of type void
     */
    private GetUsageResponse _handleCreateUsageResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetUsageResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetUsageResponse>(){});

        return _result;
    }

    /**
     * Gets a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse getSubscription(
                final String subscriptionId
    ) throws Throwable {

        HttpRequest _request = _buildGetSubscriptionRequest(subscriptionId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSubscriptionResponse(_context);
    }

    /**
     * Gets a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @return    Returns the void response from the API call 
     */
    public void getSubscriptionAsync(
                final String subscriptionId,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSubscriptionRequest(subscriptionId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleGetSubscriptionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSubscription
     */
    private HttpRequest _buildGetSubscriptionRequest(
                final String subscriptionId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSubscription
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleGetSubscriptionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Updates the payment method from a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for updating the paymentmethod from a subscription
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionPaymentMethod(
                final String subscriptionId,
                final UpdateSubscriptionPaymentMethodRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionPaymentMethodRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionPaymentMethodResponse(_context);
    }

    /**
     * Updates the payment method from a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for updating the paymentmethod from a subscription
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionPaymentMethodAsync(
                final String subscriptionId,
                final UpdateSubscriptionPaymentMethodRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionPaymentMethodRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionPaymentMethodResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionPaymentMethod
     */
    private HttpRequest _buildUpdateSubscriptionPaymentMethodRequest(
                final String subscriptionId,
                final UpdateSubscriptionPaymentMethodRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/payment-method");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionPaymentMethod
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionPaymentMethodResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Creates a new subscription
     * @param    body    Required parameter: Request for creating a subscription
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse createSubscription(
                final CreateSubscriptionRequest body
    ) throws Throwable {

        HttpRequest _request = _buildCreateSubscriptionRequest(body);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSubscriptionResponse(_context);
    }

    /**
     * Creates a new subscription
     * @param    body    Required parameter: Request for creating a subscription
     * @return    Returns the void response from the API call 
     */
    public void createSubscriptionAsync(
                final CreateSubscriptionRequest body,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSubscriptionRequest(body);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleCreateSubscriptionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSubscription
     */
    private HttpRequest _buildCreateSubscriptionRequest(
                final CreateSubscriptionRequest body) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions");
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSubscription
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleCreateSubscriptionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Creates a new Subscription item
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for creating a subscription item
     * @return    Returns the GetSubscriptionItemResponse response from the API call 
     */
    public GetSubscriptionItemResponse createSubscriptionItem(
                final String subscriptionId,
                final CreateSubscriptionItemRequest request
    ) throws Throwable {

        HttpRequest _request = _buildCreateSubscriptionItemRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateSubscriptionItemResponse(_context);
    }

    /**
     * Creates a new Subscription item
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for creating a subscription item
     * @return    Returns the void response from the API call 
     */
    public void createSubscriptionItemAsync(
                final String subscriptionId,
                final CreateSubscriptionItemRequest request,
                final APICallBack<GetSubscriptionItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateSubscriptionItemRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionItemResponse returnValue = _handleCreateSubscriptionItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createSubscriptionItem
     */
    private HttpRequest _buildCreateSubscriptionItemRequest(
                final String subscriptionId,
                final CreateSubscriptionItemRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createSubscriptionItem
     * @return An object of type void
     */
    private GetSubscriptionItemResponse _handleCreateSubscriptionItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionItemResponse>(){});

        return _result;
    }

    /**
     * Creates a discount
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for creating a discount
     * @return    Returns the GetDiscountResponse response from the API call 
     */
    public GetDiscountResponse createDiscount(
                final String subscriptionId,
                final CreateDiscountRequest request
    ) throws Throwable {

        HttpRequest _request = _buildCreateDiscountRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateDiscountResponse(_context);
    }

    /**
     * Creates a discount
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for creating a discount
     * @return    Returns the void response from the API call 
     */
    public void createDiscountAsync(
                final String subscriptionId,
                final CreateDiscountRequest request,
                final APICallBack<GetDiscountResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateDiscountRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetDiscountResponse returnValue = _handleCreateDiscountResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createDiscount
     */
    private HttpRequest _buildCreateDiscountRequest(
                final String subscriptionId,
                final CreateDiscountRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/discounts");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createDiscount
     * @return An object of type void
     */
    private GetDiscountResponse _handleCreateDiscountResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetDiscountResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetDiscountResponse>(){});

        return _result;
    }

    /**
     * Get Subscription Item
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    itemId    Required parameter: Item id
     * @return    Returns the GetSubscriptionItemResponse response from the API call 
     */
    public GetSubscriptionItemResponse getSubscriptionItem(
                final String subscriptionId,
                final String itemId
    ) throws Throwable {

        HttpRequest _request = _buildGetSubscriptionItemRequest(subscriptionId, itemId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSubscriptionItemResponse(_context);
    }

    /**
     * Get Subscription Item
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    itemId    Required parameter: Item id
     * @return    Returns the void response from the API call 
     */
    public void getSubscriptionItemAsync(
                final String subscriptionId,
                final String itemId,
                final APICallBack<GetSubscriptionItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSubscriptionItemRequest(subscriptionId, itemId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionItemResponse returnValue = _handleGetSubscriptionItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionItem
     */
    private HttpRequest _buildGetSubscriptionItemRequest(
                final String subscriptionId,
                final String itemId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items/{item_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("item_id", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSubscriptionItem
     * @return An object of type void
     */
    private GetSubscriptionItemResponse _handleGetSubscriptionItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionItemResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Example: 
     * @param    request    Required parameter: Request for updating a subscription affiliation id
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionAffiliationId(
                final String subscriptionId,
                final UpdateSubscriptionAffiliationIdRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionAffiliationIdRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionAffiliationIdResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Example: 
     * @param    request    Required parameter: Request for updating a subscription affiliation id
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionAffiliationIdAsync(
                final String subscriptionId,
                final UpdateSubscriptionAffiliationIdRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionAffiliationIdRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionAffiliationIdResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionAffiliationId
     */
    private HttpRequest _buildUpdateSubscriptionAffiliationIdRequest(
                final String subscriptionId,
                final UpdateSubscriptionAffiliationIdRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/gateway-affiliation-id");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionAffiliationId
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionAffiliationIdResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Create Usage
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    itemId    Required parameter: Item id
     * @return    Returns the GetUsageResponse response from the API call 
     */
    public GetUsageResponse createAnUsage(
                final String subscriptionId,
                final String itemId
    ) throws Throwable {

        HttpRequest _request = _buildCreateAnUsageRequest(subscriptionId, itemId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateAnUsageResponse(_context);
    }

    /**
     * Create Usage
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    itemId    Required parameter: Item id
     * @return    Returns the void response from the API call 
     */
    public void createAnUsageAsync(
                final String subscriptionId,
                final String itemId,
                final APICallBack<GetUsageResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateAnUsageRequest(subscriptionId, itemId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetUsageResponse returnValue = _handleCreateAnUsageResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createAnUsage
     */
    private HttpRequest _buildCreateAnUsageRequest(
                final String subscriptionId,
                final String itemId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items/{item_id}/usages");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("item_id", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createAnUsage
     * @return An object of type void
     */
    private GetUsageResponse _handleCreateAnUsageResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetUsageResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetUsageResponse>(){});

        return _result;
    }

    /**
     * Gets all subscriptions
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    code    Optional parameter: Filter for subscription's code
     * @param    billingType    Optional parameter: Filter for subscription's billing type
     * @param    customerId    Optional parameter: Filter for subscription's customer id
     * @param    planId    Optional parameter: Filter for subscription's plan id
     * @param    cardId    Optional parameter: Filter for subscription's card id
     * @param    status    Optional parameter: Filter for subscription's status
     * @param    nextBillingSince    Optional parameter: Filter for subscription's next billing date start range
     * @param    nextBillingUntil    Optional parameter: Filter for subscription's next billing date end range
     * @param    createdSince    Optional parameter: Filter for subscription's creation date start range
     * @param    createdUntil    Optional parameter: Filter for subscriptions creation date end range
     * @return    Returns the ListSubscriptionsResponse response from the API call 
     */
    public ListSubscriptionsResponse getSubscriptions(
                final Integer page,
                final Integer size,
                final String code,
                final String billingType,
                final String customerId,
                final String planId,
                final String cardId,
                final String status,
                final DateTime nextBillingSince,
                final DateTime nextBillingUntil,
                final DateTime createdSince,
                final DateTime createdUntil
    ) throws Throwable {

        HttpRequest _request = _buildGetSubscriptionsRequest(page, size, code, billingType, customerId, planId, cardId, status, nextBillingSince, nextBillingUntil, createdSince, createdUntil);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSubscriptionsResponse(_context);
    }

    /**
     * Gets all subscriptions
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    code    Optional parameter: Filter for subscription's code
     * @param    billingType    Optional parameter: Filter for subscription's billing type
     * @param    customerId    Optional parameter: Filter for subscription's customer id
     * @param    planId    Optional parameter: Filter for subscription's plan id
     * @param    cardId    Optional parameter: Filter for subscription's card id
     * @param    status    Optional parameter: Filter for subscription's status
     * @param    nextBillingSince    Optional parameter: Filter for subscription's next billing date start range
     * @param    nextBillingUntil    Optional parameter: Filter for subscription's next billing date end range
     * @param    createdSince    Optional parameter: Filter for subscription's creation date start range
     * @param    createdUntil    Optional parameter: Filter for subscriptions creation date end range
     * @return    Returns the void response from the API call 
     */
    public void getSubscriptionsAsync(
                final Integer page,
                final Integer size,
                final String code,
                final String billingType,
                final String customerId,
                final String planId,
                final String cardId,
                final String status,
                final DateTime nextBillingSince,
                final DateTime nextBillingUntil,
                final DateTime createdSince,
                final DateTime createdUntil,
                final APICallBack<ListSubscriptionsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSubscriptionsRequest(page, size, code, billingType, customerId, planId, cardId, status, nextBillingSince, nextBillingUntil, createdSince, createdUntil);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListSubscriptionsResponse returnValue = _handleGetSubscriptionsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSubscriptions
     */
    private HttpRequest _buildGetSubscriptionsRequest(
                final Integer page,
                final Integer size,
                final String code,
                final String billingType,
                final String customerId,
                final String planId,
                final String cardId,
                final String status,
                final DateTime nextBillingSince,
                final DateTime nextBillingUntil,
                final DateTime createdSince,
                final DateTime createdUntil) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions");

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        if (code != null) {
            _queryParameters.put("code", code);
        }
        if (billingType != null) {
            _queryParameters.put("billing_type", billingType);
        }
        if (customerId != null) {
            _queryParameters.put("customer_id", customerId);
        }
        if (planId != null) {
            _queryParameters.put("plan_id", planId);
        }
        if (cardId != null) {
            _queryParameters.put("card_id", cardId);
        }
        if (status != null) {
            _queryParameters.put("status", status);
        }
        if (nextBillingSince != null) {
            _queryParameters.put("next_billing_since", DateTimeHelper.toRfc8601DateTime(nextBillingSince));
        }
        if (nextBillingUntil != null) {
            _queryParameters.put("next_billing_until", DateTimeHelper.toRfc8601DateTime(nextBillingUntil));
        }
        if (createdSince != null) {
            _queryParameters.put("created_since", DateTimeHelper.toRfc8601DateTime(createdSince));
        }
        if (createdUntil != null) {
            _queryParameters.put("created_until", DateTimeHelper.toRfc8601DateTime(createdUntil));
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSubscriptions
     * @return An object of type void
     */
    private ListSubscriptionsResponse _handleGetSubscriptionsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListSubscriptionsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSubscriptionsResponse>(){});

        return _result;
    }

    /**
     * Updates the metadata from a subscription
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    request    Required parameter: Request for updating the subscrption metadata
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionMetadata(
                final String subscriptionId,
                final UpdateMetadataRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionMetadataRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionMetadataResponse(_context);
    }

    /**
     * Updates the metadata from a subscription
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    request    Required parameter: Request for updating the subscrption metadata
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionMetadataAsync(
                final String subscriptionId,
                final UpdateMetadataRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionMetadataRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionMetadataResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionMetadata
     */
    private HttpRequest _buildUpdateSubscriptionMetadataRequest(
                final String subscriptionId,
                final UpdateMetadataRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/Subscriptions/{subscription_id}/metadata");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionMetadata
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionMetadataResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Deletes a subscription item
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    subscriptionItemId    Required parameter: Subscription item id
     * @return    Returns the GetSubscriptionItemResponse response from the API call 
     */
    public GetSubscriptionItemResponse deleteSubscriptionItem(
                final String subscriptionId,
                final String subscriptionItemId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteSubscriptionItemRequest(subscriptionId, subscriptionItemId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteSubscriptionItemResponse(_context);
    }

    /**
     * Deletes a subscription item
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    subscriptionItemId    Required parameter: Subscription item id
     * @return    Returns the void response from the API call 
     */
    public void deleteSubscriptionItemAsync(
                final String subscriptionId,
                final String subscriptionItemId,
                final APICallBack<GetSubscriptionItemResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteSubscriptionItemRequest(subscriptionId, subscriptionItemId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionItemResponse returnValue = _handleDeleteSubscriptionItemResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteSubscriptionItem
     */
    private HttpRequest _buildDeleteSubscriptionItemRequest(
                final String subscriptionId,
                final String subscriptionItemId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items/{subscription_item_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("subscription_item_id", subscriptionItemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteSubscriptionItem
     * @return An object of type void
     */
    private GetSubscriptionItemResponse _handleDeleteSubscriptionItemResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionItemResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionItemResponse>(){});

        return _result;
    }

    /**
     * Deletes a usage
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    itemId    Required parameter: The subscription item id
     * @param    usageId    Required parameter: The usage id
     * @return    Returns the GetUsageResponse response from the API call 
     */
    public GetUsageResponse deleteUsage(
                final String subscriptionId,
                final String itemId,
                final String usageId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteUsageRequest(subscriptionId, itemId, usageId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteUsageResponse(_context);
    }

    /**
     * Deletes a usage
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    itemId    Required parameter: The subscription item id
     * @param    usageId    Required parameter: The usage id
     * @return    Returns the void response from the API call 
     */
    public void deleteUsageAsync(
                final String subscriptionId,
                final String itemId,
                final String usageId,
                final APICallBack<GetUsageResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteUsageRequest(subscriptionId, itemId, usageId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetUsageResponse returnValue = _handleDeleteUsageResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteUsage
     */
    private HttpRequest _buildDeleteUsageRequest(
                final String subscriptionId,
                final String itemId,
                final String usageId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items/{item_id}/usages/{usage_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("item_id", itemId);
        _templateParameters.put("usage_id", usageId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteUsage
     * @return An object of type void
     */
    private GetUsageResponse _handleDeleteUsageResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetUsageResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetUsageResponse>(){});

        return _result;
    }

    /**
     * Deletes a discount
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    discountId    Required parameter: Discount Id
     * @return    Returns the GetDiscountResponse response from the API call 
     */
    public GetDiscountResponse deleteDiscount(
                final String subscriptionId,
                final String discountId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteDiscountRequest(subscriptionId, discountId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteDiscountResponse(_context);
    }

    /**
     * Deletes a discount
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    discountId    Required parameter: Discount Id
     * @return    Returns the void response from the API call 
     */
    public void deleteDiscountAsync(
                final String subscriptionId,
                final String discountId,
                final APICallBack<GetDiscountResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteDiscountRequest(subscriptionId, discountId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetDiscountResponse returnValue = _handleDeleteDiscountResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteDiscount
     */
    private HttpRequest _buildDeleteDiscountRequest(
                final String subscriptionId,
                final String discountId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/discounts/{discount_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("discount_id", discountId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteDiscount
     * @return An object of type void
     */
    private GetDiscountResponse _handleDeleteDiscountResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetDiscountResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetDiscountResponse>(){});

        return _result;
    }

    /**
     * Cancels a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Optional parameter: Request for cancelling a subscription
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse cancelSubscription(
                final String subscriptionId,
                final CreateCancelSubscriptionRequest request
    ) throws Throwable {

        HttpRequest _request = _buildCancelSubscriptionRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCancelSubscriptionResponse(_context);
    }

    /**
     * Cancels a subscription
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Optional parameter: Request for cancelling a subscription
     * @return    Returns the void response from the API call 
     */
    public void cancelSubscriptionAsync(
                final String subscriptionId,
                final CreateCancelSubscriptionRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCancelSubscriptionRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleCancelSubscriptionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for cancelSubscription
     */
    private HttpRequest _buildCancelSubscriptionRequest(
                final String subscriptionId,
                final CreateCancelSubscriptionRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().deleteBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for cancelSubscription
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleCancelSubscriptionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    discountId    Required parameter: Example: 
     * @return    Returns the GetDiscountResponse response from the API call 
     */
    public GetDiscountResponse getDiscountById(
                final String subscriptionId,
                final String discountId
    ) throws Throwable {

        HttpRequest _request = _buildGetDiscountByIdRequest(subscriptionId, discountId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetDiscountByIdResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    discountId    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getDiscountByIdAsync(
                final String subscriptionId,
                final String discountId,
                final APICallBack<GetDiscountResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetDiscountByIdRequest(subscriptionId, discountId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetDiscountResponse returnValue = _handleGetDiscountByIdResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getDiscountById
     */
    private HttpRequest _buildGetDiscountByIdRequest(
                final String subscriptionId,
                final String discountId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/discounts/{discountId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("discountId", discountId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getDiscountById
     * @return An object of type void
     */
    private GetDiscountResponse _handleGetDiscountByIdResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetDiscountResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetDiscountResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    page    Required parameter: Page number
     * @param    size    Required parameter: Page size
     * @return    Returns the ListDiscountsResponse response from the API call 
     */
    public ListDiscountsResponse getDiscounts(
                final String subscriptionId,
                final int page,
                final int size
    ) throws Throwable {

        HttpRequest _request = _buildGetDiscountsRequest(subscriptionId, page, size);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetDiscountsResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    page    Required parameter: Page number
     * @param    size    Required parameter: Page size
     * @return    Returns the void response from the API call 
     */
    public void getDiscountsAsync(
                final String subscriptionId,
                final int page,
                final int size,
                final APICallBack<ListDiscountsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetDiscountsRequest(subscriptionId, page, size);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListDiscountsResponse returnValue = _handleGetDiscountsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getDiscounts
     */
    private HttpRequest _buildGetDiscountsRequest(
                final String subscriptionId,
                final int page,
                final int size) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/discounts/");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("page", page);
        _queryParameters.put("size", size);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getDiscounts
     * @return An object of type void
     */
    private ListDiscountsResponse _handleGetDiscountsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListDiscountsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListDiscountsResponse>(){});

        return _result;
    }

    /**
     * Creates a increment
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for creating a increment
     * @return    Returns the GetIncrementResponse response from the API call 
     */
    public GetIncrementResponse createIncrement(
                final String subscriptionId,
                final CreateIncrementRequest request
    ) throws Throwable {

        HttpRequest _request = _buildCreateIncrementRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleCreateIncrementResponse(_context);
    }

    /**
     * Creates a increment
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    request    Required parameter: Request for creating a increment
     * @return    Returns the void response from the API call 
     */
    public void createIncrementAsync(
                final String subscriptionId,
                final CreateIncrementRequest request,
                final APICallBack<GetIncrementResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildCreateIncrementRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetIncrementResponse returnValue = _handleCreateIncrementResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for createIncrement
     */
    private HttpRequest _buildCreateIncrementRequest(
                final String subscriptionId,
                final CreateIncrementRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/increments");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for createIncrement
     * @return An object of type void
     */
    private GetIncrementResponse _handleCreateIncrementResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetIncrementResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetIncrementResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @return    Returns the ListIncrementsResponse response from the API call 
     */
    public ListIncrementsResponse getIncrements(
                final String subscriptionId,
                final Integer page,
                final Integer size
    ) throws Throwable {

        HttpRequest _request = _buildGetIncrementsRequest(subscriptionId, page, size);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetIncrementsResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @return    Returns the void response from the API call 
     */
    public void getIncrementsAsync(
                final String subscriptionId,
                final Integer page,
                final Integer size,
                final APICallBack<ListIncrementsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetIncrementsRequest(subscriptionId, page, size);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListIncrementsResponse returnValue = _handleGetIncrementsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getIncrements
     */
    private HttpRequest _buildGetIncrementsRequest(
                final String subscriptionId,
                final Integer page,
                final Integer size) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/increments/");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getIncrements
     * @return An object of type void
     */
    private ListIncrementsResponse _handleGetIncrementsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListIncrementsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListIncrementsResponse>(){});

        return _result;
    }

    /**
     * Deletes a increment
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    incrementId    Required parameter: Increment id
     * @return    Returns the GetIncrementResponse response from the API call 
     */
    public GetIncrementResponse deleteIncrement(
                final String subscriptionId,
                final String incrementId
    ) throws Throwable {

        HttpRequest _request = _buildDeleteIncrementRequest(subscriptionId, incrementId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleDeleteIncrementResponse(_context);
    }

    /**
     * Deletes a increment
     * @param    subscriptionId    Required parameter: Subscription id
     * @param    incrementId    Required parameter: Increment id
     * @return    Returns the void response from the API call 
     */
    public void deleteIncrementAsync(
                final String subscriptionId,
                final String incrementId,
                final APICallBack<GetIncrementResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildDeleteIncrementRequest(subscriptionId, incrementId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetIncrementResponse returnValue = _handleDeleteIncrementResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for deleteIncrement
     */
    private HttpRequest _buildDeleteIncrementRequest(
                final String subscriptionId,
                final String incrementId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/increments/{increment_id}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("increment_id", incrementId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().delete(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for deleteIncrement
     * @return An object of type void
     */
    private GetIncrementResponse _handleDeleteIncrementResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetIncrementResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetIncrementResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Subscription Identifier
     * @param    cycleId    Optional parameter: Cycle id
     * @param    size    Optional parameter: Page size
     * @param    page    Optional parameter: Page number
     * @param    itemId    Optional parameter: Identificador do item
     * @param    group    Optional parameter: identificador da loja (account) de cada item
     * @return    Returns the GetUsagesDetailsResponse response from the API call 
     */
    public GetUsagesDetailsResponse getUsagesDetails(
                final String subscriptionId,
                final String cycleId,
                final Integer size,
                final Integer page,
                final String itemId,
                final String group
    ) throws Throwable {

        HttpRequest _request = _buildGetUsagesDetailsRequest(subscriptionId, cycleId, size, page, itemId, group);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetUsagesDetailsResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Subscription Identifier
     * @param    cycleId    Optional parameter: Cycle id
     * @param    size    Optional parameter: Page size
     * @param    page    Optional parameter: Page number
     * @param    itemId    Optional parameter: Identificador do item
     * @param    group    Optional parameter: identificador da loja (account) de cada item
     * @return    Returns the void response from the API call 
     */
    public void getUsagesDetailsAsync(
                final String subscriptionId,
                final String cycleId,
                final Integer size,
                final Integer page,
                final String itemId,
                final String group,
                final APICallBack<GetUsagesDetailsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetUsagesDetailsRequest(subscriptionId, cycleId, size, page, itemId, group);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetUsagesDetailsResponse returnValue = _handleGetUsagesDetailsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getUsagesDetails
     */
    private HttpRequest _buildGetUsagesDetailsRequest(
                final String subscriptionId,
                final String cycleId,
                final Integer size,
                final Integer page,
                final String itemId,
                final String group) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/usages-details/");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (cycleId != null) {
            _queryParameters.put("cycle_id", cycleId);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (itemId != null) {
            _queryParameters.put("item_id", itemId);
        }
        if (group != null) {
            _queryParameters.put("group", group);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getUsagesDetails
     * @return An object of type void
     */
    private GetUsagesDetailsResponse _handleGetUsagesDetailsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetUsagesDetailsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetUsagesDetailsResponse>(){});

        return _result;
    }

    /**
     * Lists all usages from a subscription item
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    itemId    Required parameter: The subscription item id
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    code    Optional parameter: Identification code in the client system
     * @param    group    Optional parameter: Identification group in the client system
     * @return    Returns the ListUsagesResponse response from the API call 
     */
    public ListUsagesResponse getUsages(
                final String subscriptionId,
                final String itemId,
                final Integer page,
                final Integer size,
                final String code,
                final String group
    ) throws Throwable {

        HttpRequest _request = _buildGetUsagesRequest(subscriptionId, itemId, page, size, code, group);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetUsagesResponse(_context);
    }

    /**
     * Lists all usages from a subscription item
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    itemId    Required parameter: The subscription item id
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    code    Optional parameter: Identification code in the client system
     * @param    group    Optional parameter: Identification group in the client system
     * @return    Returns the void response from the API call 
     */
    public void getUsagesAsync(
                final String subscriptionId,
                final String itemId,
                final Integer page,
                final Integer size,
                final String code,
                final String group,
                final APICallBack<ListUsagesResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetUsagesRequest(subscriptionId, itemId, page, size, code, group);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListUsagesResponse returnValue = _handleGetUsagesResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getUsages
     */
    private HttpRequest _buildGetUsagesRequest(
                final String subscriptionId,
                final String itemId,
                final Integer page,
                final Integer size,
                final String code,
                final String group) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items/{item_id}/usages");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("item_id", itemId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        if (code != null) {
            _queryParameters.put("code", code);
        }
        if (group != null) {
            _queryParameters.put("group", group);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getUsages
     * @return An object of type void
     */
    private ListUsagesResponse _handleGetUsagesResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListUsagesResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListUsagesResponse>(){});

        return _result;
    }

    /**
     * Get Subscription Items
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    name    Optional parameter: The item name
     * @param    code    Optional parameter: Identification code in the client system
     * @param    status    Optional parameter: The item statis
     * @param    description    Optional parameter: The item description
     * @param    createdSince    Optional parameter: Filter for item's creation date start range
     * @param    createdUntil    Optional parameter: Filter for item's creation date end range
     * @return    Returns the ListSubscriptionItemsResponse response from the API call 
     */
    public ListSubscriptionItemsResponse getSubscriptionItems(
                final String subscriptionId,
                final Integer page,
                final Integer size,
                final String name,
                final String code,
                final String status,
                final String description,
                final String createdSince,
                final String createdUntil
    ) throws Throwable {

        HttpRequest _request = _buildGetSubscriptionItemsRequest(subscriptionId, page, size, name, code, status, description, createdSince, createdUntil);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSubscriptionItemsResponse(_context);
    }

    /**
     * Get Subscription Items
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    page    Optional parameter: Page number
     * @param    size    Optional parameter: Page size
     * @param    name    Optional parameter: The item name
     * @param    code    Optional parameter: Identification code in the client system
     * @param    status    Optional parameter: The item statis
     * @param    description    Optional parameter: The item description
     * @param    createdSince    Optional parameter: Filter for item's creation date start range
     * @param    createdUntil    Optional parameter: Filter for item's creation date end range
     * @return    Returns the void response from the API call 
     */
    public void getSubscriptionItemsAsync(
                final String subscriptionId,
                final Integer page,
                final Integer size,
                final String name,
                final String code,
                final String status,
                final String description,
                final String createdSince,
                final String createdUntil,
                final APICallBack<ListSubscriptionItemsResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSubscriptionItemsRequest(subscriptionId, page, size, name, code, status, description, createdSince, createdUntil);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListSubscriptionItemsResponse returnValue = _handleGetSubscriptionItemsResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionItems
     */
    private HttpRequest _buildGetSubscriptionItemsRequest(
                final String subscriptionId,
                final Integer page,
                final Integer size,
                final String name,
                final String code,
                final String status,
                final String description,
                final String createdSince,
                final String createdUntil) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/items");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        if (page != null) {
            _queryParameters.put("page", page);
        }
        if (size != null) {
            _queryParameters.put("size", size);
        }
        if (name != null) {
            _queryParameters.put("name", name);
        }
        if (code != null) {
            _queryParameters.put("code", code);
        }
        if (status != null) {
            _queryParameters.put("status", status);
        }
        if (description != null) {
            _queryParameters.put("description", description);
        }
        if (createdSince != null) {
            _queryParameters.put("created_since", createdSince);
        }
        if (createdUntil != null) {
            _queryParameters.put("created_until", createdUntil);
        }
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSubscriptionItems
     * @return An object of type void
     */
    private ListSubscriptionItemsResponse _handleGetSubscriptionItemsResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListSubscriptionItemsResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListSubscriptionItemsResponse>(){});

        return _result;
    }

    /**
     * Updates the boleto due days from a subscription
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    request    Required parameter: Example: 
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionDueDays(
                final String subscriptionId,
                final UpdateSubscriptionDueDaysRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionDueDaysRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionDueDaysResponse(_context);
    }

    /**
     * Updates the boleto due days from a subscription
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    request    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionDueDaysAsync(
                final String subscriptionId,
                final UpdateSubscriptionDueDaysRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionDueDaysRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionDueDaysResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionDueDays
     */
    private HttpRequest _buildUpdateSubscriptionDueDaysRequest(
                final String subscriptionId,
                final UpdateSubscriptionDueDaysRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/boleto-due-days");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionDueDays
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionDueDaysResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Atualização do valor mínimo da assinatura
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    request    Required parameter: Request da requisição com o valor mínimo que será configurado
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionMiniumPrice(
                final String subscriptionId,
                final UpdateSubscriptionMinimumPriceRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionMiniumPriceRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionMiniumPriceResponse(_context);
    }

    /**
     * Atualização do valor mínimo da assinatura
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    request    Required parameter: Request da requisição com o valor mínimo que será configurado
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionMiniumPriceAsync(
                final String subscriptionId,
                final UpdateSubscriptionMinimumPriceRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionMiniumPriceRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionMiniumPriceResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionMiniumPrice
     */
    private HttpRequest _buildUpdateSubscriptionMiniumPriceRequest(
                final String subscriptionId,
                final UpdateSubscriptionMinimumPriceRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/minimum_price");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionMiniumPrice
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionMiniumPriceResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * Updates the billing date from a subscription
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    request    Required parameter: Request for updating the subscription billing date
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateSubscriptionBillingDate(
                final String subscriptionId,
                final UpdateSubscriptionBillingDateRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateSubscriptionBillingDateRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateSubscriptionBillingDateResponse(_context);
    }

    /**
     * Updates the billing date from a subscription
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    request    Required parameter: Request for updating the subscription billing date
     * @return    Returns the void response from the API call 
     */
    public void updateSubscriptionBillingDateAsync(
                final String subscriptionId,
                final UpdateSubscriptionBillingDateRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateSubscriptionBillingDateRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateSubscriptionBillingDateResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateSubscriptionBillingDate
     */
    private HttpRequest _buildUpdateSubscriptionBillingDateRequest(
                final String subscriptionId,
                final UpdateSubscriptionBillingDateRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/billing-date");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateSubscriptionBillingDate
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateSubscriptionBillingDateResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Example: 
     * @param    request    Required parameter: Request for updating the end date of the current signature cycle
     * @return    Returns the GetSubscriptionResponse response from the API call 
     */
    public GetSubscriptionResponse updateLatestPeriodEndAt(
                final String subscriptionId,
                final UpdateCurrentCycleEndDateRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateLatestPeriodEndAtRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleUpdateLatestPeriodEndAtResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Example: 
     * @param    request    Required parameter: Request for updating the end date of the current signature cycle
     * @return    Returns the void response from the API call 
     */
    public void updateLatestPeriodEndAtAsync(
                final String subscriptionId,
                final UpdateCurrentCycleEndDateRequest request,
                final APICallBack<GetSubscriptionResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateLatestPeriodEndAtRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetSubscriptionResponse returnValue = _handleUpdateLatestPeriodEndAtResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateLatestPeriodEndAt
     */
    private HttpRequest _buildUpdateLatestPeriodEndAtRequest(
                final String subscriptionId,
                final UpdateCurrentCycleEndDateRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/periods/latest/end-at");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateLatestPeriodEndAt
     * @return An object of type void
     */
    private GetSubscriptionResponse _handleUpdateLatestPeriodEndAtResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetSubscriptionResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetSubscriptionResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    request    Required parameter: Request for updating the end date of the subscription current status
     * @return    Returns the void response from the API call 
     */
    public void updateCurrentCycleStatus(
                final String subscriptionId,
                final UpdateCurrentCycleStatusRequest request
    ) throws Throwable {

        HttpRequest _request = _buildUpdateCurrentCycleStatusRequest(subscriptionId, request);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        _handleUpdateCurrentCycleStatusResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    request    Required parameter: Request for updating the end date of the subscription current status
     * @return    Returns the void response from the API call 
     */
    public void updateCurrentCycleStatusAsync(
                final String subscriptionId,
                final UpdateCurrentCycleStatusRequest request,
                final APICallBack<Object> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildUpdateCurrentCycleStatusRequest(subscriptionId, request);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            _handleUpdateCurrentCycleStatusResponse(_context);
                            callBack.onSuccess(_context, null);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for updateCurrentCycleStatus
     */
    private HttpRequest _buildUpdateCurrentCycleStatusRequest(
                final String subscriptionId,
                final UpdateCurrentCycleStatusRequest request) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/cycle-status");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("content-type", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().patchBody(_queryUrl, _headers, APIHelper.serialize(request),
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for updateCurrentCycleStatus
     * @return An object of type void
     */
    private void _handleUpdateCurrentCycleStatusResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);


    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    page    Required parameter: Page number
     * @param    size    Required parameter: Page size
     * @return    Returns the ListCyclesResponse response from the API call 
     */
    public ListCyclesResponse getSubscriptionCycles(
                final String subscriptionId,
                final String page,
                final String size
    ) throws Throwable {

        HttpRequest _request = _buildGetSubscriptionCyclesRequest(subscriptionId, page, size);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSubscriptionCyclesResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Subscription Id
     * @param    page    Required parameter: Page number
     * @param    size    Required parameter: Page size
     * @return    Returns the void response from the API call 
     */
    public void getSubscriptionCyclesAsync(
                final String subscriptionId,
                final String page,
                final String size,
                final APICallBack<ListCyclesResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSubscriptionCyclesRequest(subscriptionId, page, size);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            ListCyclesResponse returnValue = _handleGetSubscriptionCyclesResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionCycles
     */
    private HttpRequest _buildGetSubscriptionCyclesRequest(
                final String subscriptionId,
                final String page,
                final String size) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/cycles");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);

        //process query parameters
        Map<String, Object> _queryParameters = new HashMap<String, Object>();
        _queryParameters.put("page", page);
        _queryParameters.put("size", size);
        APIHelper.appendUrlWithQueryParameters(_queryBuilder, _queryParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSubscriptionCycles
     * @return An object of type void
     */
    private ListCyclesResponse _handleGetSubscriptionCyclesResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        ListCyclesResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ListCyclesResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    cycleId    Required parameter: Example: 
     * @return    Returns the GetPeriodResponse response from the API call 
     */
    public GetPeriodResponse getSubscriptionCycleById(
                final String subscriptionId,
                final String cycleId
    ) throws Throwable {

        HttpRequest _request = _buildGetSubscriptionCycleByIdRequest(subscriptionId, cycleId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleGetSubscriptionCycleByIdResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: The subscription id
     * @param    cycleId    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void getSubscriptionCycleByIdAsync(
                final String subscriptionId,
                final String cycleId,
                final APICallBack<GetPeriodResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildGetSubscriptionCycleByIdRequest(subscriptionId, cycleId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPeriodResponse returnValue = _handleGetSubscriptionCycleByIdResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for getSubscriptionCycleById
     */
    private HttpRequest _buildGetSubscriptionCycleByIdRequest(
                final String subscriptionId,
                final String cycleId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/cycles/{cycleId}");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        _templateParameters.put("cycleId", cycleId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for getSubscriptionCycleById
     * @return An object of type void
     */
    private GetPeriodResponse _handleGetSubscriptionCycleByIdResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPeriodResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPeriodResponse>(){});

        return _result;
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Example: 
     * @return    Returns the GetPeriodResponse response from the API call 
     */
    public GetPeriodResponse renewSubscription(
                final String subscriptionId
    ) throws Throwable {

        HttpRequest _request = _buildRenewSubscriptionRequest(subscriptionId);
        HttpResponse _response = getClientInstance().executeAsString(_request);
        HttpContext _context = new HttpContext(_request, _response);

        return _handleRenewSubscriptionResponse(_context);
    }

    /**
     * TODO: type endpoint description here
     * @param    subscriptionId    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void renewSubscriptionAsync(
                final String subscriptionId,
                final APICallBack<GetPeriodResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {

                HttpRequest _request;
                try {
                    _request = _buildRenewSubscriptionRequest(subscriptionId);
                } catch (Exception e) {
                    callBack.onFailure(null, e);
                    return;
                }

                // Invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {
                            GetPeriodResponse returnValue = _handleRenewSubscriptionResponse(_context);
                            callBack.onSuccess(_context, returnValue);
                        } catch (Exception e) {
                            callBack.onFailure(_context, e);
                        }
                    }

                    public void onFailure(HttpContext _context, Throwable _exception) {
                        // Let the caller know of the failure
                        callBack.onFailure(_context, _exception);
                    }
                });
            }
        };

        // Execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Builds the HttpRequest object for renewSubscription
     */
    private HttpRequest _buildRenewSubscriptionRequest(
                final String subscriptionId) throws IOException, APIException {
        //the base uri for api requests
        String _baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder _queryBuilder = new StringBuilder(_baseUri + "/subscriptions/{subscription_id}/cycles");

        //process template parameters
        Map<String, Object> _templateParameters = new HashMap<String, Object>();
        _templateParameters.put("subscription_id", subscriptionId);
        APIHelper.appendUrlWithTemplateParameters(_queryBuilder, _templateParameters);
        //validate and preprocess url
        String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

        //load all headers for the outgoing API request
        Map<String, String> _headers = new HashMap<String, String>();
        _headers.put("user-agent", BaseController.userAgent);
        _headers.put("accept", "application/json");


        //prepare and invoke the API call request to fetch the response
        HttpRequest _request = getClientInstance().post(_queryUrl, _headers, null,
                Configuration.basicAuthUserName, Configuration.basicAuthPassword);

        // Invoke the callback before request if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnBeforeRequest(_request);
        }

        return _request;
    }

    /**
     * Processes the response for renewSubscription
     * @return An object of type void
     */
    private GetPeriodResponse _handleRenewSubscriptionResponse(HttpContext _context)
            throws APIException, IOException {
        HttpResponse _response = _context.getResponse();

        //invoke the callback after response if its not null
        if (getHttpCallBack() != null) {
            getHttpCallBack().OnAfterResponse(_context);
        }

        //handle errors defined at the API level
        validateResponse(_response, _context);

        //extract result from the http response
        String _responseBody = ((HttpStringResponse)_response).getBody();
        GetPeriodResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<GetPeriodResponse>(){});

        return _result;
    }

}
