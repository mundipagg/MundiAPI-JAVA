/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mundipagg.api.models;

import java.util.*;

public class PrivateLabelBuilder {
    //the instance to build
    private PrivateLabel privateLabel;

    /**
     * Default constructor to initialize the instance
     */
    public PrivateLabelBuilder() {
        privateLabel = new PrivateLabel();
    }

    /**
     * Number of installments
     */
    public PrivateLabelBuilder installments(Integer installments) {
        privateLabel.setInstallments(installments);
        return this;
    }

    /**
     * The text that will be shown on the private label's statement
     */
    public PrivateLabelBuilder statementDescriptor(String statementDescriptor) {
        privateLabel.setStatementDescriptor(statementDescriptor);
        return this;
    }

    public PrivateLabelBuilder card(Card1 card) {
        privateLabel.setCard(card);
        return this;
    }

    /**
     * The Card id
     */
    public PrivateLabelBuilder cardId(String cardId) {
        privateLabel.setCardId(cardId);
        return this;
    }

    public PrivateLabelBuilder cardToken(String cardToken) {
        privateLabel.setCardToken(cardToken);
        return this;
    }

    /**
     * Indicates a recurrence
     */
    public PrivateLabelBuilder recurrence(Boolean recurrence) {
        privateLabel.setRecurrence(recurrence);
        return this;
    }

    /**
     * Indicates if the operation should be only authorization or auth and capture.
     */
    public PrivateLabelBuilder capture(Boolean capture) {
        privateLabel.setCapture(capture);
        return this;
    }

    /**
     * Indicates whether the extended label (private label) is enabled
     */
    public PrivateLabelBuilder extendedLimitEnabled(Boolean extendedLimitEnabled) {
        privateLabel.setExtendedLimitEnabled(extendedLimitEnabled);
        return this;
    }

    /**
     * Extended Limit Code
     */
    public PrivateLabelBuilder extendedLimitCode(String extendedLimitCode) {
        privateLabel.setExtendedLimitCode(extendedLimitCode);
        return this;
    }

    /**
     * Defines whether the card has been used one or more times.
     */
    public PrivateLabelBuilder recurrencyCycle(String recurrencyCycle) {
        privateLabel.setRecurrencyCycle(recurrencyCycle);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public PrivateLabel build() {
        return privateLabel;
    }
}