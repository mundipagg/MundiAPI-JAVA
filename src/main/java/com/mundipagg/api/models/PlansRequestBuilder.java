/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mundipagg.api.models;

import java.util.*;

public class PlansRequestBuilder {
    //the instance to build
    private PlansRequest plansRequest;

    /**
     * Default constructor to initialize the instance
     */
    public PlansRequestBuilder() {
        plansRequest = new PlansRequest();
    }

    /**
     * Plan's name
     */
    public PlansRequestBuilder name(String name) {
        plansRequest.setName(name);
        return this;
    }

    /**
     * Description
     */
    public PlansRequestBuilder description(String description) {
        plansRequest.setDescription(description);
        return this;
    }

    /**
     * Text that will be printed on the credit card's statement
     */
    public PlansRequestBuilder statementDescriptor(String statementDescriptor) {
        plansRequest.setStatementDescriptor(statementDescriptor);
        return this;
    }

    /**
     * Plan items
     */
    public PlansRequestBuilder items(List<CreatePlanItemRequest> items) {
        plansRequest.setItems(items);
        return this;
    }

    /**
     * Indicates if the plan is shippable
     */
    public PlansRequestBuilder shippable(boolean shippable) {
        plansRequest.setShippable(shippable);
        return this;
    }

    /**
     * Allowed payment methods for the plan
     */
    public PlansRequestBuilder paymentMethods(List<String> paymentMethods) {
        plansRequest.setPaymentMethods(paymentMethods);
        return this;
    }

    /**
     * Number of installments
     */
    public PlansRequestBuilder installments(List<Integer> installments) {
        plansRequest.setInstallments(installments);
        return this;
    }

    /**
     * Currency
     */
    public PlansRequestBuilder currency(String currency) {
        plansRequest.setCurrency(currency);
        return this;
    }

    /**
     * Interval
     */
    public PlansRequestBuilder interval(String interval) {
        plansRequest.setInterval(interval);
        return this;
    }

    /**
     * Interval counts between two charges. For instance, if the interval is 'month' and count is 2, the customer will be charged once every two months.
     */
    public PlansRequestBuilder intervalCount(int intervalCount) {
        plansRequest.setIntervalCount(intervalCount);
        return this;
    }

    /**
     * Allowed billings days for the subscription, in case the plan type is 'exact_day'
     */
    public PlansRequestBuilder billingDays(List<Integer> billingDays) {
        plansRequest.setBillingDays(billingDays);
        return this;
    }

    /**
     * Billing type
     */
    public PlansRequestBuilder billingType(String billingType) {
        plansRequest.setBillingType(billingType);
        return this;
    }

    public PlansRequestBuilder pricingScheme(PricingScheme4 pricingScheme) {
        plansRequest.setPricingScheme(pricingScheme);
        return this;
    }

    /**
     * Metadata
     */
    public PlansRequestBuilder metadata(LinkedHashMap<String, String> metadata) {
        plansRequest.setMetadata(metadata);
        return this;
    }

    /**
     * Minimum price that will be charged
     */
    public PlansRequestBuilder minimumPrice(Integer minimumPrice) {
        plansRequest.setMinimumPrice(minimumPrice);
        return this;
    }

    /**
     * Number of cycles
     */
    public PlansRequestBuilder cycles(Integer cycles) {
        plansRequest.setCycles(cycles);
        return this;
    }

    /**
     * Quantity
     */
    public PlansRequestBuilder quantity(Integer quantity) {
        plansRequest.setQuantity(quantity);
        return this;
    }

    /**
     * Trial period, where the customer will not be charged.
     */
    public PlansRequestBuilder trialPeriodDays(Integer trialPeriodDays) {
        plansRequest.setTrialPeriodDays(trialPeriodDays);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public PlansRequest build() {
        return plansRequest;
    }
}