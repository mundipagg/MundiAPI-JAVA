/*
 * MundiAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mundipagg.api.models;

import java.util.*;

public class CreditCard1Builder {
    //the instance to build
    private CreditCard1 creditCard1;

    /**
     * Default constructor to initialize the instance
     */
    public CreditCard1Builder() {
        creditCard1 = new CreditCard1();
    }

    /**
     * Number of installments
     */
    public CreditCard1Builder installments(Integer installments) {
        creditCard1.setInstallments(installments);
        return this;
    }

    /**
     * The text that will be shown on the credit card's statement
     */
    public CreditCard1Builder statementDescriptor(String statementDescriptor) {
        creditCard1.setStatementDescriptor(statementDescriptor);
        return this;
    }

    public CreditCard1Builder card(Card1 card) {
        creditCard1.setCard(card);
        return this;
    }

    /**
     * The credit card id
     */
    public CreditCard1Builder cardId(String cardId) {
        creditCard1.setCardId(cardId);
        return this;
    }

    public CreditCard1Builder cardToken(String cardToken) {
        creditCard1.setCardToken(cardToken);
        return this;
    }

    /**
     * Indicates a recurrence
     */
    public CreditCard1Builder recurrence(Boolean recurrence) {
        creditCard1.setRecurrence(recurrence);
        return this;
    }

    /**
     * Indicates if the operation should be only authorization or auth and capture.
     */
    public CreditCard1Builder capture(Boolean capture) {
        creditCard1.setCapture(capture);
        return this;
    }

    /**
     * Indicates whether the extended label (private label) is enabled
     */
    public CreditCard1Builder extendedLimitEnabled(Boolean extendedLimitEnabled) {
        creditCard1.setExtendedLimitEnabled(extendedLimitEnabled);
        return this;
    }

    /**
     * Extended Limit Code
     */
    public CreditCard1Builder extendedLimitCode(String extendedLimitCode) {
        creditCard1.setExtendedLimitCode(extendedLimitCode);
        return this;
    }

    /**
     * Customer business segment code
     */
    public CreditCard1Builder merchantCategoryCode(Long merchantCategoryCode) {
        creditCard1.setMerchantCategoryCode(merchantCategoryCode);
        return this;
    }

    public CreditCard1Builder authentication(Authentication2 authentication) {
        creditCard1.setAuthentication(authentication);
        return this;
    }

    public CreditCard1Builder contactless(Contactless contactless) {
        creditCard1.setContactless(contactless);
        return this;
    }

    /**
     * Indicates whether a particular payment will enter the offline retry flow
     */
    public CreditCard1Builder autoRecovery(Boolean autoRecovery) {
        creditCard1.setAutoRecovery(autoRecovery);
        return this;
    }

    /**
     * AuthOnly, AuthAndCapture, PreAuth
     */
    public CreditCard1Builder operationType(String operationType) {
        creditCard1.setOperationType(operationType);
        return this;
    }

    /**
     * Defines whether the card has been used one or more times.
     */
    public CreditCard1Builder recurrencyCycle(String recurrencyCycle) {
        creditCard1.setRecurrencyCycle(recurrencyCycle);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public CreditCard1 build() {
        return creditCard1;
    }
}